using System;
using System.Data;

namespace RefactoringExample
{
    public static class ReportGenerator
    {
        private const int adultCustomer = 25;
        private const int middleAgeCustomer = 30;
        private const int seniorCustomer = 40;
        private const int grandSeniorCustomer = 60;

        private const double lowDiscount = 0.05;
        private const double standardDiscount = 0.1;
        private const double highDiscount = 0.15;
        private const double hugeDiscount = 0.2;

        public static void Generate(User user, DateTime reportDate, ReportType reportType)
        {
            Console.WriteLine("Starting report generation...");
            PrintReportHeader(reportType);
            PrintUserInfo(user, reportDate);
            PrintAccountCategory(user);
            PrintUserStatusInfo(user, reportDate);
            GenerateRecommendations(user);
            PrintReportFooter();
            SavingImitation(user, reportType);
        }

        private static void PrintReportHeader(ReportType reportType)
        {
            switch (reportType)
            {
                case ReportType.Detailed:
                    Console.WriteLine("=== DETAILED REPORT ===");
                    break;
                case ReportType.Summary:
                    Console.WriteLine("=== SUMMARY REPORT ===");
                    break;
                default:
                    Console.WriteLine("=== STANDARD REPORT ===");
                    break;
            }
        }

        private static void PrintUserInfo(User user, DateTime reportDate)
        {
            // форматирование заголовка
            string header = $"Report for: {user.Name}";
            Console.WriteLine(header);
            Console.WriteLine(new string('-', header.Length));

            // основная информация (дублирование формата вывода)
            Console.WriteLine($"Age: {user.Age}");
            Console.WriteLine($"Discount: {user.Discount:P0}");
            Console.WriteLine($"Active status: {(user.IsActive ? "Active" : "Inactive")}");
            Console.WriteLine($"Report date: {reportDate:yyyy-MM-dd HH:mm:ss}");
        }

        private static void PrintAccountCategory(User user)
        {
            // генерация раздела с деталями
            Console.WriteLine("\nDETAILS:");
            Console.WriteLine("Account information:");

            string category = user.Age switch
            {
                < adultCustomer => user.Discount > standardDiscount
                ? "Young customer with high discount"
                : "Young customer with standard discount",

                < seniorCustomer => user.Discount > highDiscount
                ? "Adult customer with premium discount"
                : "Adult customer with standard discount",

                _ => user.Discount > hugeDiscount
                ? "Senior customer with special discount"
                : "Senior customer with standard discount"
            };

            Console.WriteLine(category);
        }

        private static void PrintUserStatusInfo(User user, DateTime reportDate)
        {
            // дополнительная информация на основе статуса
            if (user.IsActive)
            {
                Console.WriteLine("Customer is currently active");
                Console.WriteLine("Last activity: " + reportDate.AddDays(-7).ToString("yyyy-MM-dd"));
            }
            else
            {
                Console.WriteLine("Customer is not active");
                Console.WriteLine("Account will be archived soon");
            }
        }

        private static void GenerateRecommendations(User user)
        {
            // генерация рекомендаций (искусственно сложная логика)
            Console.WriteLine("\nRECOMMENDATIONS:");
            if (!user.IsActive && user.Age < middleAgeCustomer)
            {
                Console.WriteLine("Consider reactivation campaign for young inactive customer");
            }
            else if (user.IsActive && user.Discount < lowDiscount)
            {
                Console.WriteLine("Consider loyalty program for active customer with low discount");
            }
            else if (user.Age > grandSeniorCustomer && user.Discount < standardDiscount)
            {
                Console.WriteLine("Consider senior discount program");
            }
        }

        private static void PrintReportFooter()
        {
            // футер отчета
            Console.WriteLine("\n" + new string('=', 50));
            Console.WriteLine("Report generated by: Automated Reporting System");
            Console.WriteLine($"Generation timestamp: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            Console.WriteLine(new string('=', 50));
        }

        private static void SavingImitation(User user, ReportType reportType)
        {
             // имитация сохранения отчета в разные форматы
            if (reportType == ReportType.Detailed)
            {
                Console.WriteLine("Saving detailed report to database...");
                // Имитация длительной операции
                System.Threading.Thread.Sleep(100);
                Console.WriteLine("Report saved successfully");
            }

            Console.WriteLine($"Report for {user.Name} completed at {DateTime.Now:HH:mm:ss}");
        } 
    }
}